<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="RvsB" />
<Content type="html"><![CDATA[

<!DOCTYPE html>
<html lang="en-us">
<head>
<meta charset="utf-8"/>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
<title>RvsB</title>
<script async src="https://www.googletagmanager.com/gtag/js?id=G-MENBM6GSNY"></script><script>function gtag(){dataLayer.push(arguments)}window.dataLayer=window.dataLayer||[],gtag("js",new Date),gtag("config","G-MENBM6GSNY")</script>
<style>html{box-sizing:border-box}*,*:before,*:after{box-sizing:inherit}html,body{height:100%}canvas{display:block}body{margin:0}#unity-container{width:100%;height:100%;position:relative}#unity-canvas{width:100%;height:100%;background:#231F20}#loading-cover{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center}#unity-loading-bar{flex:1 1 auto;display:flex;flex-direction:column;justify-content:center;align-items:center}#unity-logo{text-align:center}#unity-logo img{max-width:80%;max-height:80%}#unity-progress-bar-empty{width:40%;height:24px;margin:10px 20px 20px 10px;text-align:left;border:1px solid white;padding:2px}#unity-progress-bar-full{width:0;height:100%;background:white}.light #unity-progress-bar-empty{border-color:black}.light #unity-progress-bar-full{background:black}.spinner,.spinner:after{border-radius:50%;width:5em;height:5em}.spinner{margin:10px;font-size:10px;position:relative;text-indent:-9999em;border-top:1.1em solid rgba(255,255,255,0.2);border-right:1.1em solid rgba(255,255,255,0.2);border-bottom:1.1em solid rgba(255,255,255,0.2);border-left:1.1em solid #ffffff;transform:translateZ(0);animation:spinner-spin 1.1s infinite linear}@keyframes spinner-spin{0%{transform:rotate(0deg)} 100%{transform:rotate(360deg)}}</style>
<style> body{overflow:hidden;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}</style>
</head>
<body class="dark">
<div id="unity-container" class="unity-desktop">
<canvas id="unity-canvas"></canvas>
</div>
<div id="loading-cover" style="display:none;">
<div id="unity-loading-bar">
<div id="unity-progress-bar-empty" style="display: none;">
<div id="unity-progress-bar-full"></div>
</div>
<div class="spinner"></div>
</div>
</div>
<script src="https://cdn.jsdelivr.net/gh/st39/sdk@main/api.js"></script>
        <script>
                const hideFullScreenButton = "";
                const buildUrl = "https://cdn.jsdelivr.net/gh/mind4ur/data@1be63b008eb61453dcc661456d45efe057813def/db";
                const loaderUrl = buildUrl + "/loader.js";
                const config = {
                    dataUrl: buildUrl + "/rvsb.data.js",
                    frameworkUrl: buildUrl + "/rvsb.js",
                    codeUrl: buildUrl + "/rvsb.wasm.js",
                streamingAssetsUrl: "StreamingAssets",
                };
        
                const container = document.querySelector("#unity-container");
                const canvas = document.querySelector("#unity-canvas");
                const loadingCover = document.querySelector("#loading-cover");
                const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
                const progressBarFull = document.querySelector("#unity-progress-bar-full");
                const spinner = document.querySelector('.spinner');
        
                const canFullscreen = (function () {
                    for (const key of [
                        'exitFullscreen',
                        'webkitExitFullscreen',
                        'webkitCancelFullScreen',
                        'mozCancelFullScreen',
                        'msExitFullscreen',
                    ]) {
                        if (key in document) {
                            return true;
                        }
                    }
                    return false;
                }());
        
                if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
                    container.className = "unity-mobile";
                    
                }
                loadingCover.style.display = "";

                document.addEventListener('contextmenu', event => event.preventDefault());

                function FocusGame() {
                    window.focus();
                    canvas.focus();
                }
        var flasgsData = 'null';
        window.addEventListener('pointerdown', FocusGame);
        window.addEventListener('touchstart', FocusGame);

        let StartUnityInstance;
        let myGameInstance;
        let ysdk = null;

        let environmentData = {
            language: "en",

            browser: (function() {

            })()
        };
        
        let cloudSaves = 'noData';
        let paymentsData = 'none';
        let playerData = 'noData'; // 
        let player = null;
        let payments = null;
        let initGame = false;
        let nowFullAdOpen = false;
        
        function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); }

function FullAdShow() {
    try {
        if (nowFullAdOpen !== true) {
            nowFullAdOpen = true;
            if (initGame === true) {
                myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
            }

            setTimeout(() => {
                nowFullAdOpen = false;
                if (initGame === true) {
                    myGameInstance.SendMessage('YandexGame', 'CloseFullAd', 'true');
                }
                FocusGame();
            }, 500);
        }
    } catch {}
}


function RewardedShow(id) {
    try {
        myGameInstance.SendMessage('YandexGame', 'RewardVideo', id);
        onClose();
    } catch (err) {}

    function onClose() {
        myGameInstance.SendMessage('YandexGame', 'CloseVideo');
        FocusGame();
    }
}

try {
    const script = document.createElement("script");
    script.src = loaderUrl;
    script.onload = () => {
        StartUnityInstance = function () {
            createUnityInstance(canvas, config, (progress) => {
                spinner.style.display = "none";
                progressBarEmpty.style.display = "";
                progressBarFull.style.width = `${100 * progress}%`;
            }).then((unityInstance) => {
                myGameInstance = unityInstance;
                loadingCover.style.display = "none";
            }).catch(() => {});
        };
        StartUnityInstance();
    };
    document.body.appendChild(script);
} catch {}

        function Review() {
            try {
                ysdk.feedback.canReview()
                    .then(({ value, reason }) => {
                        if (value) {
                            ysdk.feedback.requestReview().then(({ feedbackSent }) => {
                                console.log('feedbackSent ', feedbackSent);
                                if (feedbackSent) {
                                    myGameInstance.SendMessage('YandexGame', 'ReviewSent', 'true');
                                    console.log('Review left')
                                }
                                else {
                                    myGameInstance.SendMessage('YandexGame', 'ReviewSent', 'false');
                                    console.log('Review not left', reason)
                                }
                                FocusGame();
                            })
                        }
                        else {
                            console.log('Review can show = false', reason);
                            FocusGame();
                        }
                    })
            } catch (e) {
                console.error('CRASH Review: ', e.message);
                FocusGame();
            }
        }
let leaderboard = null;
async function GetLeaderboardScores(nameLB, maxPlayers, quantityTop, quantityAround, photoSize, auth) {
    try {
        if (leaderboard === null) {
            await WaitForLeaderboard();
        }

        var jsonEntries = {
            technoName: '',
            isDefault: false,
            isInvertSortOrder: false,
            decimalOffset: 0,
            type: '' // , title: ''
        };

        ysdk.getLeaderboards()
            .then(leaderboard => leaderboard.getLeaderboardDescription(nameLB))
            .then(res => {
                jsonEntries.technoName = nameLB;
                jsonEntries.isDefault = res.default;
                jsonEntries.isInvertSortOrder = res.description.invert_sort_order;
                jsonEntries.decimalOffset = res.description.score_format.options.decimal_offset;
                jsonEntries.type = res.description.type; // Не определяется на момент 18.07.23
                //jsonEntries.title = res.title; // Реализуйте по предпочтениям

                return leaderboard.getLeaderboardEntries(nameLB, {
                    quantityTop: quantityTop,
                    includeUser: auth,
                    quantityAround: quantityAround
                });
            })
            .then(res => {
                let jsonPlayers = EntriesLB(res, maxPlayers, photoSize);
                let combinedJson = { ...jsonEntries, ...jsonPlayers };

                myGameInstance.SendMessage('YandexGame', 'LeaderboardEntries', JSON.stringify(combinedJson));
            })
            .catch(error => {
                console.error(error);
            });
    }
    catch (e) {
        console.error('CRASH Get Leaderboard: ', e.message);
    }
}

async function SetLeaderboardScores(_name, score) {
    try {
        if (leaderboard === null) {
            await WaitForLeaderboard();
        }

        ysdk.getLeaderboards()
            .then(leaderboard => {
                leaderboard.setLeaderboardScore(_name, score);
            });
    } catch (e) {
        console.error('CRASH Set Leader board Scores: ', e.message);
    }
}

function SaveCloud(jsonData, flush) {
    if (player == null) {
        console.error('CRASH Save Cloud: ', 'Didnt have time to load');
        return;
    }
    try {
        player.setData({
            saves: [jsonData],
        }, flush);
    } catch (e) {
        console.error('CRASH Save Cloud: ', e.message);
    }
}
        function PromptShow() {
            try {
                ysdk.shortcut.showPrompt()
                    .then(result => {
                        console.log('Shortcut created?:', result);
                        if (result.outcome === 'accepted') {
                            console.log('Prompt Success');
                            myGameInstance.SendMessage('YandexGame', 'OnPromptSuccess');
                        }
                        else {
                            myGameInstance.SendMessage('YandexGame', 'OnPromptFail');
                        }
                        FocusGame();
                    });
            } catch (e) {
                console.error('CRASH Prompt Show: ', e.message);
                FocusGame();
            }
        }
         function InitGame(photoSize, scopes, gameReadyApi) {
            console.log('Init GAME');
            initGame = true;
            photoSizeForInit = photoSize;
            scopesForInit = scopes;


            if (nowFullAdOpen == true) {
                myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
            }
        }   

         function GameReadyAPI() {
            if (letGameReadyApi) {

            }
        };
		window.SDK_OPTIONS={gameId:"r2tzpy9cgrn2u4xgzc9z0zbtvxm16mby",onEvent:function(a){switch(a.name){case"SDK_GAME_PAUSE":break;case"SDK_GAME_START":break;case"SDK_READY":break}}};(function(a,b,c){var d=a.getElementsByTagName(b)[0];a.getElementById(c)||(a=a.createElement(b),a.id=c,a.src="https://cdn.jsdelivr.net/gh/st39/sdk@main/sdkjs.js",d.parentNode.insertBefore(a,d))})(document,"script","gamemonetize-sdk");
		let isAdShown=false;function onClick(e){if(!isAdShown&&typeof sdk!=='undefined'&&typeof sdk.showBanner==='function'){sdk.showBanner();isAdShown=true}window.removeEventListener("click",onClick)}window.addEventListener("click",onClick);
    </script>
</body>
</html>

]]></Content>
</Module>
